{"version":3,"sources":["dist/PixelGrid.js","App.js","index.js"],"names":["_ref","_ref$data","data","_ref$options","options","props","_objectWithoutProperties","grid","useRef","container","queue","useEffect","current","pixelGrid","_objectSpread","root","canvas","remove","concat","_toConsumableArray","Object","values","flat","length","frame","shifted","shift","update","console","warn","push","React","createElement","assign","ref","matrix","base","Array","Math","pow","fill","matrix100","r","g","b","x","App","useState","setData","size","setSize","padding","setPadding","resolution","setResolution","fps","setFps","id","setInterval","map","random","clearInterval","type","value","min","max","onChange","ev","Number","currentTarget","PixelGrid","background","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f7fa997.chunk.js","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { useEffect, useRef } from \"react\";\nimport pixelGrid from \"pixel-grid\";\nexport default (function (_ref) {\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      props = _objectWithoutProperties(_ref, [\"data\", \"options\"]);\n\n  var grid = useRef({});\n  var container = useRef();\n  var queue = useRef([]);\n  useEffect(function () {\n    grid.current = pixelGrid(data, _objectSpread({}, options, {\n      root: container.current\n    }));\n    return function () {\n      queue.current = [];\n      grid.current.canvas && grid.current.canvas.remove();\n    };\n  }, [].concat(_toConsumableArray(Object.values(options).flat()), [data.length]));\n  useEffect(function () {\n    grid.current.frame && grid.current.frame(function () {\n      var shifted = queue.current.shift();\n      shifted && grid.current.update(shifted);\n    });\n  }, []);\n  useEffect(function () {\n    if (queue.current.length > 30) {\n      console.warn(\"PixelGrid update queue > 30; flushing\");\n      queue.current = [];\n    }\n\n    queue.current.push(data);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: container\n  }, props));\n});","import React, { useState, useEffect } from \"react\";\nimport PixelGrid from \"./dist/PixelGrid\";\n\n\nconst matrix = base => Array(Math.pow(base, 2)).fill(0);\nconst defRes = 150;\nconst matrix100 = matrix(defRes)\n\nfunction App() {\n  const [data, setData] = useState(matrix100);\n  const [size, setSize] = useState(4);\n  const [padding, setPadding] = useState(1);\n  const [resolution, setResolution] = useState(defRes);\n  const [fps, setFps] = useState(60);\n\n  useEffect(() => {\n    let id =\n      setInterval(\n        () => setData(matrix(resolution || 0).fill(0).map(Math.random)),\n        1000 / (fps || 0.00001)\n      );\n    return () => clearInterval(id);\n  }, [resolution, fps]);\n\n  return (\n    <>\n      px size: <input type=\"number\" value={size} min={0} max={20} onChange={ev => setSize(Math.min(20, Number(ev.currentTarget.value)))} />\n      padding: <input type=\"number\" value={padding} min={0} max={20} onChange={ev => setPadding(Math.min(20, Number(ev.currentTarget.value)))} />\n      resolution: <input type=\"number\" value={resolution} min={1} max={600} onChange={ev => setResolution(Math.min(600, Number(ev.currentTarget.value)))} />\n      fps: <input type=\"number\" value={fps} min={1} max={100} onChange={ev => setFps(Math.min(80, Number(ev.currentTarget.value)))} />\n      \n      <PixelGrid\n        data={data}\n        options={{\n          size,\n          padding,\n          background: [1, 1, 1],\n        }}\n      />\n\n\n      {/* prettier-ignore */}\n      <PixelGrid\n        data={[\n          x, r, x, g, x, b, \n          r, x, g, x, b, x, \n          x, r, x, g, x, b, \n          r, x, g, x, b, x, \n          x, r, x, g, x, b, \n          r, x, g, x, b, x,\n        ]}\n        options={{ padding: 0 }}\n      />\n    </>\n  );\n}\n\nconst r = \"#f00\";\nconst g = \"#0f0\";\nconst b = \"#00f\";\nconst x = \"#000\";\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}